#!/usr/bin/env node

/**
 * Script pour supprimer la contrainte restrictive sur willingness_to_pay
 */

import { query } from './api/database.js'

async function fixWillingnessConstraint() {
  console.log('üîß Suppression de la contrainte restrictive sur willingness_to_pay')
  console.log('=' .repeat(60))
  
  try {
    // V√©rifier la contrainte actuelle
    console.log('üîç V√©rification de la contrainte actuelle...')
    const currentConstraint = await query(`
      SELECT pg_get_constraintdef(oid) as definition
      FROM pg_constraint 
      WHERE conname = 'ideas_willingness_to_pay_check'
    `)
    
    if (currentConstraint.rows.length > 0) {
      console.log(`   Contrainte trouv√©e: ${currentConstraint.rows[0].definition}`)
    } else {
      console.log('   Aucune contrainte trouv√©e')
      return
    }
    
    // Supprimer la contrainte restrictive
    console.log('\nüóëÔ∏è  Suppression de la contrainte...')
    await query(`
      ALTER TABLE ideas 
      DROP CONSTRAINT ideas_willingness_to_pay_check
    `)
    
    console.log('‚úÖ Contrainte supprim√©e avec succ√®s!')
    
    // V√©rifier que la contrainte a √©t√© supprim√©e
    console.log('\n‚úÖ V√©rification de la suppression...')
    const checkRemoval = await query(`
      SELECT pg_get_constraintdef(oid) as definition
      FROM pg_constraint 
      WHERE conname = 'ideas_willingness_to_pay_check'
    `)
    
    if (checkRemoval.rows.length === 0) {
      console.log('   ‚úÖ Contrainte supprim√©e avec succ√®s')
    } else {
      console.log('   ‚ö†Ô∏è  La contrainte existe encore')
    }
    
    // Tester avec une valeur libre
    console.log('\nüß™ Test avec une valeur libre...')
    try {
      await query(`
        UPDATE ideas 
        SET willingness_to_pay = 'Test de valeur libre - 50 USD/mois'
        WHERE id = 1
      `)
      console.log('   ‚úÖ Test r√©ussi - Les valeurs libres sont maintenant accept√©es')
      
      // Remettre la valeur originale
      await query(`
        UPDATE ideas 
        SET willingness_to_pay = 'high'
        WHERE id = 1
      `)
      
    } catch (testError) {
      console.log(`   ‚ùå Test √©chou√©: ${testError.message}`)
    }
    
    console.log('\nüéâ Correction termin√©e!')
    console.log('   Le champ willingness_to_pay accepte maintenant du texte libre')
    console.log('   Les utilisateurs peuvent saisir des r√©ponses personnalis√©es')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error)
    process.exit(1)
  }
}

// Ex√©cuter la correction
if (import.meta.url === `file://${process.argv[1]}`) {
  fixWillingnessConstraint().then(() => {
    console.log('‚úÖ Script termin√©')
    process.exit(0)
  }).catch(error => {
    console.error('‚ùå Erreur:', error)
    process.exit(1)
  })
}

export { fixWillingnessConstraint }
