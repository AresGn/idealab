// Script de test pour v√©rifier les endpoints API d'Id√©aLab
// Ex√©cuter avec: node test_api_endpoints.js

import axios from 'axios'

const API_BASE = 'http://localhost:3000/api'
let authToken = null
let testUserId = null
let testIdeaId = null

// Configuration axios
const api = axios.create({
  baseURL: API_BASE,
  timeout: 10000
})

// Intercepteur pour ajouter le token d'authentification
api.interceptors.request.use((config) => {
  if (authToken) {
    config.headers.Authorization = `Bearer ${authToken}`
  }
  return config
})

// Fonction utilitaire pour les logs
function log(message, data = null) {
  console.log(`\nüîç ${message}`)
  if (data) {
    console.log(JSON.stringify(data, null, 2))
  }
}

function success(message) {
  console.log(`‚úÖ ${message}`)
}

function error(message, err = null) {
  console.log(`‚ùå ${message}`)
  if (err) {
    console.log(`   Erreur: ${err.response?.data?.error || err.message}`)
  }
}

// Tests d'authentification
async function testAuthentication() {
  log('=== TESTS D\'AUTHENTIFICATION ===')
  
  try {
    // Test de connexion
    log('Test de connexion...')
    const loginResponse = await api.post('/auth/login', {
      email: 'john.doe@example.com',
      password: 'password123'
    })
    
    authToken = loginResponse.data.token
    testUserId = loginResponse.data.user.id
    success('Connexion r√©ussie')
    
    // Test de r√©cup√©ration du profil
    log('Test de r√©cup√©ration du profil...')
    const profileResponse = await api.get('/auth/me')
    success('Profil r√©cup√©r√© avec succ√®s')
    
  } catch (err) {
    error('Erreur lors des tests d\'authentification', err)
    throw err
  }
}

// Tests des id√©es
async function testIdeas() {
  log('=== TESTS DES ID√âES ===')
  
  try {
    // Test de r√©cup√©ration des id√©es
    log('Test de r√©cup√©ration des id√©es...')
    const ideasResponse = await api.get('/ideas')
    success(`${ideasResponse.data.ideas.length} id√©es r√©cup√©r√©es`)
    
    if (ideasResponse.data.ideas.length > 0) {
      testIdeaId = ideasResponse.data.ideas[0].id
    }
    
    // Test de cr√©ation d'une id√©e
    log('Test de cr√©ation d\'une id√©e...')
    const createResponse = await api.post('/ideas', {
      title: 'Test API - Id√©e de test',
      description: 'Ceci est une id√©e de test cr√©√©e par le script de test automatique.',
      sector: 'Technologie',
      target_audience: 'D√©veloppeurs',
      willingness_to_pay: 'medium',
      estimated_budget: '10000 FCFA'
    })
    
    const newIdeaId = createResponse.data.id
    success('Id√©e cr√©√©e avec succ√®s')
    
    // Test de r√©cup√©ration d'une id√©e sp√©cifique
    log('Test de r√©cup√©ration d\'une id√©e sp√©cifique...')
    const ideaResponse = await api.get(`/ideas/${newIdeaId}`)
    success('Id√©e sp√©cifique r√©cup√©r√©e')
    
    // Test de mise √† jour de l'id√©e
    log('Test de mise √† jour de l\'id√©e...')
    await api.put(`/ideas/${newIdeaId}`, {
      title: 'Test API - Id√©e de test (modifi√©e)'
    })
    success('Id√©e mise √† jour')
    
    // Test de suppression de l'id√©e
    log('Test de suppression de l\'id√©e...')
    await api.delete(`/ideas/${newIdeaId}`)
    success('Id√©e supprim√©e')
    
  } catch (err) {
    error('Erreur lors des tests des id√©es', err)
  }
}

// Tests du syst√®me de vote
async function testVoting() {
  log('=== TESTS DU SYST√àME DE VOTE ===')
  
  if (!testIdeaId) {
    error('Aucune id√©e disponible pour les tests de vote')
    return
  }
  
  try {
    // Test de vote standard
    log('Test de vote standard (up)...')
    await api.post('/votes/regular', {
      idea_id: testIdeaId,
      vote_type: 'up'
    })
    success('Vote standard enregistr√©')
    
    // Test de vote de paiement
    log('Test de vote de paiement (would_pay)...')
    await api.post('/votes/payment', {
      idea_id: testIdeaId,
      vote_type: 'would_pay'
    })
    success('Vote de paiement enregistr√©')
    
    // Test de r√©cup√©ration des votes d'une id√©e
    log('Test de r√©cup√©ration des votes d\'une id√©e...')
    const votesResponse = await api.get(`/votes/idea/${testIdeaId}`)
    success('Votes de l\'id√©e r√©cup√©r√©s')
    log('Compteurs de votes:', votesResponse.data)
    
    // Test de r√©cup√©ration des votes de l'utilisateur
    log('Test de r√©cup√©ration des votes de l\'utilisateur...')
    const userVotesResponse = await api.get(`/votes/user/${testIdeaId}`)
    success('Votes de l\'utilisateur r√©cup√©r√©s')
    log('Votes utilisateur:', userVotesResponse.data)
    
    // Test de modification de vote (toggle)
    log('Test de modification de vote (toggle)...')
    await api.post('/votes/regular', {
      idea_id: testIdeaId,
      vote_type: 'up'
    })
    success('Vote modifi√© (toggle)')
    
  } catch (err) {
    error('Erreur lors des tests de vote', err)
  }
}

// Tests des utilisateurs
async function testUsers() {
  log('=== TESTS DES UTILISATEURS ===')
  
  try {
    // Test de r√©cup√©ration du profil utilisateur
    log('Test de r√©cup√©ration du profil utilisateur...')
    const profileResponse = await api.get(`/users/profile/${testUserId}`)
    success('Profil utilisateur r√©cup√©r√©')
    
    // Test de r√©cup√©ration du dashboard
    log('Test de r√©cup√©ration du dashboard...')
    const dashboardResponse = await api.get(`/users/dashboard/${testUserId}`)
    success('Dashboard r√©cup√©r√©')
    
    // Test du leaderboard
    log('Test du leaderboard...')
    const leaderboardResponse = await api.get('/users/leaderboard')
    success(`Leaderboard r√©cup√©r√© avec ${leaderboardResponse.data.users.length} utilisateurs`)
    
  } catch (err) {
    error('Erreur lors des tests des utilisateurs', err)
  }
}

// Tests sans authentification
async function testUnauthenticatedAccess() {
  log('=== TESTS D\'ACC√àS NON AUTHENTIFI√â ===')
  
  // Sauvegarder le token
  const savedToken = authToken
  authToken = null
  
  try {
    // Test d'acc√®s aux id√©es publiques
    log('Test d\'acc√®s aux id√©es publiques...')
    const ideasResponse = await api.get('/ideas')
    success('Id√©es publiques accessibles')
    
    // Test d'acc√®s refus√© pour cr√©ation d'id√©e
    log('Test d\'acc√®s refus√© pour cr√©ation d\'id√©e...')
    try {
      await api.post('/ideas', {
        title: 'Test non autoris√©',
        description: 'Ceci ne devrait pas fonctionner',
        sector: 'Test'
      })
      error('PROBL√àME: Cr√©ation d\'id√©e autoris√©e sans authentification')
    } catch (err) {
      if (err.response?.status === 401) {
        success('Acc√®s correctement refus√© pour cr√©ation d\'id√©e')
      } else {
        error('Erreur inattendue', err)
      }
    }
    
    // Test d'acc√®s refus√© pour vote
    log('Test d\'acc√®s refus√© pour vote...')
    try {
      await api.post('/votes/regular', {
        idea_id: 1,
        vote_type: 'up'
      })
      error('PROBL√àME: Vote autoris√© sans authentification')
    } catch (err) {
      if (err.response?.status === 401) {
        success('Acc√®s correctement refus√© pour vote')
      } else {
        error('Erreur inattendue', err)
      }
    }
    
  } catch (err) {
    error('Erreur lors des tests d\'acc√®s non authentifi√©', err)
  } finally {
    // Restaurer le token
    authToken = savedToken
  }
}

// Test de sant√© de l'API
async function testHealth() {
  log('=== TEST DE SANT√â DE L\'API ===')
  
  try {
    const healthResponse = await api.get('/health')
    success('API en bonne sant√©')
    log('Statut:', healthResponse.data)
  } catch (err) {
    error('Probl√®me de sant√© de l\'API', err)
  }
}

// Fonction principale
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests API pour Id√©aLab\n')
  
  try {
    await testHealth()
    await testAuthentication()
    await testIdeas()
    await testVoting()
    await testUsers()
    await testUnauthenticatedAccess()
    
    console.log('\nüéâ Tous les tests sont termin√©s!')
    console.log('‚úÖ L\'API Id√©aLab fonctionne correctement')
    
  } catch (err) {
    console.log('\nüí• √âchec des tests')
    console.log('‚ùå V√©rifiez que le serveur est d√©marr√© et la base de donn√©es configur√©e')
    process.exit(1)
  }
}

// Ex√©cuter les tests
runAllTests()
