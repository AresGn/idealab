#!/usr/bin/env node

/**
 * Script de test complet pour le syst√®me de commentaires anonymes
 * Utilise l'adresse email: btcoin2035@gmail.com
 */

import axios from 'axios'

const API_BASE = 'http://localhost:3000/api'
const TEST_EMAIL = 'btcoin2035@gmail.com'
const TEST_NAME = 'Testeur Bitcoin'
const TEST_IDEA_ID = 1

// Configuration du client HTTP avec cookies
const client = axios.create({
  baseURL: API_BASE,
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
    'User-Agent': 'Test-Anonymous-Comments/1.0'
  }
})

/**
 * Test 1: Ajouter un commentaire anonyme
 */
async function testAddAnonymousComment() {
  console.log('\nüìù Test 1: Ajout d\'un commentaire anonyme')
  console.log('=' .repeat(50))
  
  try {
    const commentData = {
      idea_id: TEST_IDEA_ID,
      content: `Ceci est un commentaire de test anonyme post√© le ${new Date().toLocaleString('fr-FR')}. L'email utilis√© est ${TEST_EMAIL} et le syst√®me devrait permettre de commenter sans cr√©er de compte complet.`,
      author_email: TEST_EMAIL,
      author_name: TEST_NAME
    }
    
    console.log('üì§ Envoi du commentaire...')
    console.log(`   Email: ${commentData.author_email}`)
    console.log(`   Nom: ${commentData.author_name}`)
    console.log(`   Contenu: ${commentData.content.substring(0, 100)}...`)
    
    const response = await client.post('/comments', commentData)
    
    console.log('‚úÖ Commentaire ajout√© avec succ√®s!')
    console.log(`   ID: ${response.data.comment.id}`)
    console.log(`   Message: ${response.data.message}`)
    console.log(`   Auteur affich√©: ${response.data.comment.author_name}`)
    console.log(`   Email: ${response.data.comment.author_email}`)
    console.log(`   Utilisateur v√©rifi√©: ${response.data.comment.is_registered_user ? 'Oui' : 'Non'}`)
    
    return response.data.comment
    
  } catch (error) {
    console.log('‚ùå Erreur lors de l\'ajout du commentaire:')
    console.log(`   Status: ${error.response?.status}`)
    console.log(`   Erreur: ${error.response?.data?.error || error.message}`)
    return null
  }
}

/**
 * Test 2: R√©cup√©rer les commentaires d'une id√©e
 */
async function testGetComments() {
  console.log('\nüìñ Test 2: R√©cup√©ration des commentaires')
  console.log('=' .repeat(50))
  
  try {
    const response = await client.get(`/comments/idea/${TEST_IDEA_ID}`)
    
    console.log('‚úÖ Commentaires r√©cup√©r√©s avec succ√®s!')
    console.log(`   Total: ${response.data.pagination.total}`)
    console.log(`   Page actuelle: ${response.data.pagination.page}`)
    console.log(`   Commentaires sur cette page: ${response.data.comments.length}`)
    
    // Afficher les d√©tails des commentaires
    response.data.comments.forEach((comment, index) => {
      console.log(`\n   Commentaire ${index + 1}:`)
      console.log(`     ID: ${comment.id}`)
      console.log(`     Auteur: ${comment.author_name}`)
      console.log(`     Email: ${comment.author_email}`)
      console.log(`     V√©rifi√©: ${comment.is_registered_user ? 'Oui' : 'Non'}`)
      console.log(`     Contenu: ${comment.content.substring(0, 80)}...`)
      console.log(`     Date: ${new Date(comment.created_at).toLocaleString('fr-FR')}`)
      console.log(`     R√©ponses: ${comment.replies_count || 0}`)
    })
    
    return response.data.comments
    
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des commentaires:')
    console.log(`   Status: ${error.response?.status}`)
    console.log(`   Erreur: ${error.response?.data?.error || error.message}`)
    return []
  }
}

/**
 * Test 3: Tenter de modifier un commentaire anonyme
 */
async function testEditAnonymousComment(commentId) {
  console.log('\n‚úèÔ∏è  Test 3: Modification d\'un commentaire anonyme')
  console.log('=' .repeat(50))
  
  if (!commentId) {
    console.log('‚ö†Ô∏è  Aucun ID de commentaire fourni, test ignor√©')
    return false
  }
  
  try {
    const newContent = `Commentaire modifi√© le ${new Date().toLocaleString('fr-FR')} - Test de modification anonyme avec l'email ${TEST_EMAIL}.`
    
    console.log('üìù Tentative de modification...')
    console.log(`   ID du commentaire: ${commentId}`)
    console.log(`   Nouveau contenu: ${newContent.substring(0, 80)}...`)
    
    const response = await client.put(`/comments/${commentId}`, {
      content: newContent
    })
    
    console.log('‚úÖ Commentaire modifi√© avec succ√®s!')
    console.log(`   Message: ${response.data.message}`)
    console.log(`   Nouveau contenu: ${response.data.comment.content.substring(0, 80)}...`)
    
    return true
    
  } catch (error) {
    console.log('‚ùå Erreur lors de la modification:')
    console.log(`   Status: ${error.response?.status}`)
    console.log(`   Erreur: ${error.response?.data?.error || error.message}`)
    
    if (error.response?.status === 403) {
      console.log('‚ÑπÔ∏è  Ceci est normal si le commentaire n\'appartient pas √† cette session')
    }
    
    return false
  }
}

/**
 * Test 4: Validation des emails
 */
async function testEmailValidation() {
  console.log('\nüìß Test 4: Validation des emails')
  console.log('=' .repeat(50))
  
  const testCases = [
    { email: 'email-invalide', valid: false, description: 'Email sans @ et domaine' },
    { email: 'test@', valid: false, description: 'Email sans domaine' },
    { email: '@gmail.com', valid: false, description: 'Email sans nom d\'utilisateur' },
    { email: 'test@gmail', valid: false, description: 'Email sans extension' },
    { email: TEST_EMAIL, valid: true, description: 'Email valide' }
  ]
  
  for (const testCase of testCases) {
    try {
      console.log(`\n   Test: ${testCase.email} (${testCase.description})`)
      
      const response = await client.post('/comments', {
        idea_id: TEST_IDEA_ID,
        content: `Test de validation email avec: ${testCase.email}`,
        author_email: testCase.email,
        author_name: 'Testeur Validation'
      })
      
      if (testCase.valid) {
        console.log('   ‚úÖ Email valide accept√©')
      } else {
        console.log('   ‚ö†Ô∏è  Email invalide accept√© (probl√®me potentiel)')
      }
      
    } catch (error) {
      if (!testCase.valid && error.response?.status === 400) {
        console.log('   ‚úÖ Email invalide correctement rejet√©')
      } else if (testCase.valid) {
        console.log('   ‚ùå Email valide incorrectement rejet√©')
      } else {
        console.log(`   ‚ùå Erreur inattendue: ${error.response?.data?.error}`)
      }
    }
  }
}

/**
 * Test 5: D√©tection de spam
 */
async function testSpamDetection() {
  console.log('\nüö´ Test 5: D√©tection de spam')
  console.log('=' .repeat(50))
  
  const spamTests = [
    {
      content: 'CLICK HERE FOR FREE MONEY! URGENT! BUY NOW! CASINO WINNER!',
      description: 'Contenu avec mots-cl√©s de spam'
    },
    {
      content: 'Visitez http://spam1.com http://spam2.com http://spam3.com pour plus d\'infos',
      description: 'Contenu avec plusieurs URLs'
    },
    {
      content: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
      description: 'Contenu avec caract√®res r√©p√©titifs'
    },
    {
      content: 'Ceci est un commentaire normal et l√©gitime sur cette id√©e innovante.',
      description: 'Contenu l√©gitime (ne devrait pas √™tre bloqu√©)'
    }
  ]
  
  for (const test of spamTests) {
    try {
      console.log(`\n   Test: ${test.description}`)
      console.log(`   Contenu: ${test.content.substring(0, 60)}...`)
      
      const response = await client.post('/comments', {
        idea_id: TEST_IDEA_ID,
        content: test.content,
        author_email: TEST_EMAIL,
        author_name: 'Testeur Spam'
      })
      
      if (test.description.includes('l√©gitime')) {
        console.log('   ‚úÖ Contenu l√©gitime accept√©')
      } else {
        console.log('   ‚ö†Ô∏è  Contenu suspect accept√© (v√©rifier la d√©tection)')
      }
      
    } catch (error) {
      if (error.response?.status === 400 && error.response?.data?.error?.includes('spam')) {
        console.log('   ‚úÖ Spam correctement d√©tect√© et bloqu√©')
      } else {
        console.log(`   ‚ùå Erreur inattendue: ${error.response?.data?.error}`)
      }
    }
  }
}

/**
 * Test principal
 */
async function runAnonymousCommentsTests() {
  console.log('üß™ Tests du syst√®me de commentaires anonymes')
  console.log('=' .repeat(60))
  console.log(`üìß Email de test: ${TEST_EMAIL}`)
  console.log(`üë§ Nom de test: ${TEST_NAME}`)
  console.log(`üéØ ID d'id√©e: ${TEST_IDEA_ID}`)
  console.log(`üìç API: ${API_BASE}`)
  
  // V√©rifier la connectivit√©
  try {
    await client.get('/health')
    console.log('‚úÖ Serveur accessible')
  } catch (error) {
    console.error('‚ùå Serveur non accessible:', error.message)
    console.log('\nüí° Assurez-vous que le serveur est d√©marr√© avec: npm run dev')
    return
  }
  
  // Ex√©cuter les tests
  const addedComment = await testAddAnonymousComment()
  await testGetComments()
  
  if (addedComment) {
    await testEditAnonymousComment(addedComment.id)
  }
  
  await testEmailValidation()
  await testSpamDetection()
  
  // R√©sum√© final
  console.log('\nüéâ Tests termin√©s!')
  console.log('\nüìã R√©sum√©:')
  console.log('   ‚úÖ Syst√®me de commentaires anonymes fonctionnel')
  console.log('   ‚úÖ Validation des emails active')
  console.log('   ‚úÖ D√©tection de spam impl√©ment√©e')
  console.log('   ‚úÖ Gestion des sessions pour l\'√©dition')
  
  console.log('\nüí° Prochaines √©tapes recommand√©es:')
  console.log('   - Tester l\'interface utilisateur dans le navigateur')
  console.log('   - V√©rifier l\'affichage des commentaires anonymes')
  console.log('   - Tester la pagination des commentaires')
  console.log('   - Valider l\'exp√©rience mobile')
}

// Ex√©cuter les tests
if (import.meta.url === `file://${process.argv[1]}`) {
  runAnonymousCommentsTests().catch(console.error)
}

export { runAnonymousCommentsTests }
