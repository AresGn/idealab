import pkg from 'pg';
import dotenv from 'dotenv';

const { Client } = pkg;
dotenv.config();

// Configuration de la base de donn√©es Neon
const dbConfig = {
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
};

async function testConnection() {
  let client;
  
  try {
    console.log('üîó Test de connexion √† Neon...');
    client = new Client(dbConfig);
    await client.connect();
    console.log('‚úÖ Connexion r√©ussie!\n');

    // Test simple - compter les id√©es
    console.log('üìä STATISTIQUES RAPIDES');
    console.log('=======================');
    
    const ideaCount = await client.query('SELECT COUNT(*) as count FROM ideas');
    const voteCount = await client.query('SELECT COUNT(*) as count FROM votes');
    const commentCount = await client.query('SELECT COUNT(*) as count FROM comments');
    
    console.log(`üìù Total des id√©es: ${ideaCount.rows[0].count}`);
    console.log(`üëç Total des votes: ${voteCount.rows[0].count}`);
    console.log(`üí¨ Total des commentaires: ${commentCount.rows[0].count}`);

    // Lister les id√©es
    console.log('\nüìã LISTE DES ID√âES');
    console.log('==================');
    
    const ideas = await client.query(`
      SELECT 
        id, 
        title, 
        votes_count, 
        views_count, 
        comments_count, 
        created_at
      FROM ideas 
      ORDER BY created_at DESC
    `);
    
    if (ideas.rows.length === 0) {
      console.log('‚ùå Aucune id√©e trouv√©e');
    } else {
      ideas.rows.forEach((idea, index) => {
        const date = new Date(idea.created_at).toLocaleDateString('fr-FR');
        const shortTitle = idea.title.length > 50 ? idea.title.substring(0, 50) + '...' : idea.title;
        console.log(`${index + 1}. [ID: ${idea.id}] "${shortTitle}"`);
        console.log(`   üìä Votes: ${idea.votes_count} | üëÅÔ∏è Vues: ${idea.views_count} | üí¨ Commentaires: ${idea.comments_count}`);
        console.log(`   üìÖ Cr√©√©e le: ${date}\n`);
      });
    }

    // Id√©es avec commentaires
    console.log('üí¨ ID√âES AVEC COMMENTAIRES');
    console.log('=========================');
    
    const ideasWithComments = await client.query(`
      SELECT 
        i.id, 
        i.title, 
        COUNT(c.id) as comment_count
      FROM ideas i
      INNER JOIN comments c ON i.id = c.idea_id
      GROUP BY i.id, i.title
      ORDER BY comment_count DESC
    `);
    
    if (ideasWithComments.rows.length === 0) {
      console.log('‚úÖ Aucune id√©e avec commentaires');
    } else {
      ideasWithComments.rows.forEach((idea, index) => {
        const shortTitle = idea.title.length > 40 ? idea.title.substring(0, 40) + '...' : idea.title;
        console.log(`${index + 1}. [ID: ${idea.id}] "${shortTitle}" - ${idea.comment_count} commentaire(s)`);
      });
    }

    console.log('\nüéØ ACTIONS RECOMMAND√âES POUR LE NETTOYAGE:');
    console.log('==========================================');
    
    const totalIdeas = parseInt(ideaCount.rows[0].count);
    const ideasWithCommentsCount = ideasWithComments.rows.length;
    
    if (totalIdeas === 0) {
      console.log('‚úÖ Base de donn√©es d√©j√† vide');
    } else if (totalIdeas <= 3) {
      console.log('‚ö†Ô∏è Peu d\'id√©es dans la base. Nettoyage non recommand√©.');
    } else {
      console.log(`üìã Le script de nettoyage va:`);
      console.log(`   ‚Ä¢ Supprimer les 2 derni√®res id√©es (les plus r√©centes)`);
      if (ideasWithCommentsCount > 0) {
        console.log(`   ‚Ä¢ Supprimer ${ideasWithCommentsCount} id√©e(s) avec commentaires`);
      }
      console.log(`   ‚Ä¢ Remettre √† z√©ro les compteurs des id√©es restantes`);
      console.log(`   ‚Ä¢ Id√©es qui resteront: ${Math.max(0, totalIdeas - 2 - ideasWithCommentsCount)}`);
    }

    console.log('\nüßπ Pour nettoyer la base de donn√©es:');
    console.log('   node cleanup-database.js    (avec confirmation)');
    console.log('   node quick-cleanup.js       (sans confirmation)');

  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error);
    process.exit(1);
  } finally {
    if (client) {
      await client.end();
      console.log('\nüîå Connexion ferm√©e');
    }
  }
}

testConnection().catch(console.error);
