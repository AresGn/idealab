#!/usr/bin/env node

/**
 * Script de test complet pour les formulaires de soumission d'id√©es
 * Utilise le compte test: btcoin2035@gmail.com
 */

import axios from 'axios'

const API_BASE = 'http://localhost:3000/api'
const TEST_EMAIL = 'btcoin2035@gmail.com'
const TEST_PASSWORD = 'TestPassword123!'

// Configuration du client HTTP
const client = axios.create({
  baseURL: API_BASE,
  headers: {
    'Content-Type': 'application/json'
  }
})

/**
 * Connexion avec le compte test
 */
async function loginTestAccount() {
  console.log('\nüîê Connexion avec le compte test')
  console.log('=' .repeat(50))
  
  try {
    const response = await client.post('/auth/login', {
      email: TEST_EMAIL,
      password: TEST_PASSWORD
    })
    
    console.log('‚úÖ Connexion r√©ussie!')
    console.log(`   Token re√ßu: ${response.data.token ? 'Oui' : 'Non'}`)
    
    // Configurer le token pour les requ√™tes suivantes
    if (response.data.token) {
      client.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`
      console.log('üîë Token configur√© pour les requ√™tes suivantes')
    }
    
    return response.data
    
  } catch (error) {
    console.log('‚ùå Erreur de connexion:')
    console.log(`   Status: ${error.response?.status}`)
    console.log(`   Erreur: ${error.response?.data?.error || error.message}`)
    return null
  }
}

/**
 * Test 1: Soumission d'id√©e standard
 */
async function testStandardIdeaSubmission() {
  console.log('\nüìù Test 1: Soumission d\'id√©e standard')
  console.log('=' .repeat(50))
  
  try {
    const ideaData = {
      title: `Application de gestion agricole intelligente - Test ${Date.now()}`,
      description: `Cette application r√©volutionnaire aide les agriculteurs africains √† optimiser leurs rendements gr√¢ce √† l'intelligence artificielle. Elle fournit des pr√©dictions m√©t√©orologiques pr√©cises, des conseils personnalis√©s sur les cultures, et un syst√®me de suivi des r√©coltes en temps r√©el. L'application int√®gre √©galement un marketplace pour vendre directement aux consommateurs, √©liminant les interm√©diaires et augmentant les profits des agriculteurs.`,
      sector: 'Agriculture',
      target_audience: 'Agriculteurs ruraux en Afrique de l\'Ouest',
      willingness_to_pay: 'Oui, jusqu\'√† 50 USD/mois',
      estimated_budget: '100 000 USD pour le d√©veloppement initial'
    }
    
    console.log('üì§ Envoi de l\'id√©e standard...')
    console.log(`   Titre: ${ideaData.title}`)
    console.log(`   Secteur: ${ideaData.sector}`)
    console.log(`   Description: ${ideaData.description.substring(0, 100)}...`)
    
    const response = await client.post('/ideas', ideaData)
    
    console.log('‚úÖ Id√©e standard soumise avec succ√®s!')
    console.log(`   ID: ${response.data.idea.id}`)
    console.log(`   Message: ${response.data.message}`)
    console.log(`   Status: ${response.data.idea.status}`)
    console.log(`   Date de cr√©ation: ${new Date(response.data.idea.created_at).toLocaleString('fr-FR')}`)
    
    return response.data.idea
    
  } catch (error) {
    console.log('‚ùå Erreur lors de la soumission standard:')
    console.log(`   Status: ${error.response?.status}`)
    console.log(`   Erreur: ${error.response?.data?.error || error.message}`)
    return null
  }
}

/**
 * Test 2: Soumission d'id√©e Design Thinking
 */
async function testDesignThinkingSubmission() {
  console.log('\nüé® Test 2: Soumission d\'id√©e Design Thinking')
  console.log('=' .repeat(50))
  
  try {
    const designThinkingData = {
      title: `Plateforme d'√©ducation num√©rique pour zones rurales - Test DT ${Date.now()}`,
      sector: '√âducation',
      design_thinking_mode: true,
      completion_percentage: 60,
      
      // EMPATHIZE
      empathy_target_users: 'Enfants et adolescents des zones rurales africaines √¢g√©s de 8 √† 18 ans, ainsi que leurs enseignants et parents.',
      empathy_needs_frustrations: 'Manque d\'acc√®s √† des ressources √©ducatives de qualit√©, connexion internet limit√©e, √©quipements obsol√®tes, enseignants sous-form√©s aux nouvelles technologies.',
      empathy_usage_context: 'Utilisation principalement dans les √©coles rurales avec une connectivit√© intermittente, sur des appareils partag√©s, pendant les heures de classe et √† la maison.',
      
      // DEFINE
      define_problem_statement: 'Les enfants des zones rurales africaines n\'ont pas acc√®s √† une √©ducation num√©rique de qualit√© en raison du manque d\'infrastructure technologique et de ressources p√©dagogiques adapt√©es.',
      define_importance_reason: 'Cette in√©galit√© √©ducative perp√©tue le cycle de pauvret√© et limite les opportunit√©s de d√©veloppement √©conomique des communaut√©s rurales.',
      define_objective: 'Cr√©er une plateforme √©ducative accessible hors ligne qui fournit des contenus p√©dagogiques interactifs adapt√©s au contexte local et aux programmes scolaires africains.',
      
      // IDEATE
      ideate_proposed_solution: 'Une plateforme √©ducative hybride (en ligne/hors ligne) avec des contenus t√©l√©chargeables, des jeux √©ducatifs, des vid√©os courtes, et un syst√®me de suivi des progr√®s. La plateforme fonctionne sur tablettes robustes aliment√©es par √©nergie solaire.',
      ideate_alternatives_considered: 'Applications mobiles simples, kits √©ducatifs physiques, partenariats avec radios locales, formation d\'enseignants uniquement.',
      ideate_inspiration_references: 'Khan Academy, Eneza Education (Kenya), iSchool Zambia, One Laptop Per Child initiative.',
      
      // Champs de compatibilit√©
      description: 'Plateforme √©ducative num√©rique con√ßue sp√©cifiquement pour les zones rurales africaines avec fonctionnalit√©s hors ligne.',
      target_audience: 'Enfants et adolescents des zones rurales africaines',
      willingness_to_pay: 'Mod√®le freemium avec contenus premium',
      estimated_budget: '500 000 USD sur 3 ans'
    }
    
    console.log('üì§ Envoi de l\'id√©e Design Thinking...')
    console.log(`   Titre: ${designThinkingData.title}`)
    console.log(`   Mode Design Thinking: ${designThinkingData.design_thinking_mode}`)
    console.log(`   Progression: ${designThinkingData.completion_percentage}%`)
    
    const response = await client.post('/ideas', designThinkingData)
    
    console.log('‚úÖ Id√©e Design Thinking soumise avec succ√®s!')
    console.log(`   ID: ${response.data.idea.id}`)
    console.log(`   Message: ${response.data.message}`)
    console.log(`   Mode DT: ${response.data.idea.design_thinking_mode}`)
    console.log(`   Progression: ${response.data.idea.completion_percentage}%`)
    console.log(`   Date de cr√©ation: ${new Date(response.data.idea.created_at).toLocaleString('fr-FR')}`)
    
    return response.data.idea
    
  } catch (error) {
    console.log('‚ùå Erreur lors de la soumission Design Thinking:')
    console.log(`   Status: ${error.response?.status}`)
    console.log(`   Erreur: ${error.response?.data?.error || error.message}`)
    return null
  }
}

/**
 * Test 3: Validation des champs requis
 */
async function testFieldValidation() {
  console.log('\n‚úÖ Test 3: Validation des champs requis')
  console.log('=' .repeat(50))
  
  const testCases = [
    {
      name: 'Titre manquant',
      data: { description: 'Test', sector: 'Agriculture' },
      expectedError: true
    },
    {
      name: 'Secteur manquant',
      data: { title: 'Test', description: 'Test' },
      expectedError: true
    },
    {
      name: 'Titre trop long',
      data: { 
        title: 'A'.repeat(201), // D√©passe la limite de 200 caract√®res
        description: 'Test',
        sector: 'Agriculture'
      },
      expectedError: true
    },
    {
      name: 'Donn√©es valides minimales',
      data: {
        title: 'Id√©e test valide',
        sector: 'Agriculture'
      },
      expectedError: false
    }
  ]
  
  for (const testCase of testCases) {
    try {
      console.log(`\n   Test: ${testCase.name}`)
      
      const response = await client.post('/ideas', testCase.data)
      
      if (testCase.expectedError) {
        console.log('   ‚ö†Ô∏è  Donn√©es invalides accept√©es (probl√®me potentiel)')
      } else {
        console.log('   ‚úÖ Donn√©es valides accept√©es')
        console.log(`      ID cr√©√©: ${response.data.idea.id}`)
      }
      
    } catch (error) {
      if (testCase.expectedError && error.response?.status === 400) {
        console.log('   ‚úÖ Donn√©es invalides correctement rejet√©es')
        console.log(`      Erreur: ${error.response.data.error}`)
      } else if (!testCase.expectedError) {
        console.log('   ‚ùå Donn√©es valides incorrectement rejet√©es')
        console.log(`      Erreur: ${error.response?.data?.error}`)
      } else {
        console.log(`   ‚ùå Erreur inattendue: ${error.response?.data?.error}`)
      }
    }
  }
}

/**
 * Test 4: R√©cup√©ration des id√©es cr√©√©es
 */
async function testIdeaRetrieval() {
  console.log('\nüìñ Test 4: R√©cup√©ration des id√©es cr√©√©es')
  console.log('=' .repeat(50))
  
  try {
    const response = await client.get('/ideas?limit=5&sort=created_at&order=DESC')
    
    console.log('‚úÖ Id√©es r√©cup√©r√©es avec succ√®s!')
    console.log(`   Total d'id√©es: ${response.data.pagination.total}`)
    console.log(`   Id√©es sur cette page: ${response.data.ideas.length}`)
    
    // Afficher les derni√®res id√©es cr√©√©es
    response.data.ideas.forEach((idea, index) => {
      console.log(`\n   Id√©e ${index + 1}:`)
      console.log(`     ID: ${idea.id}`)
      console.log(`     Titre: ${idea.title}`)
      console.log(`     Secteur: ${idea.sector}`)
      console.log(`     Auteur: ${idea.author_name}`)
      console.log(`     Mode DT: ${idea.design_thinking_mode ? 'Oui' : 'Non'}`)
      console.log(`     Status: ${idea.status}`)
      console.log(`     Date: ${new Date(idea.created_at).toLocaleString('fr-FR')}`)
    })
    
    return response.data.ideas
    
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration:')
    console.log(`   Status: ${error.response?.status}`)
    console.log(`   Erreur: ${error.response?.data?.error || error.message}`)
    return []
  }
}

/**
 * Test principal
 */
async function runIdeaSubmissionTests() {
  console.log('üß™ Tests des formulaires de soumission d\'id√©es')
  console.log('=' .repeat(60))
  console.log(`üìß Compte test: ${TEST_EMAIL}`)
  console.log(`üìç API: ${API_BASE}`)
  
  // V√©rifier la connectivit√©
  try {
    await axios.get(`${API_BASE}/health`)
    console.log('‚úÖ Serveur accessible')
  } catch (error) {
    console.error('‚ùå Serveur non accessible:', error.message)
    console.log('\nüí° Assurez-vous que le serveur est d√©marr√© avec: npm run dev')
    return
  }
  
  // Se connecter avec le compte test
  const loginResult = await loginTestAccount()
  if (!loginResult) {
    console.log('‚ùå Impossible de se connecter. Tests annul√©s.')
    return
  }
  
  // Ex√©cuter les tests
  const standardIdea = await testStandardIdeaSubmission()
  const designThinkingIdea = await testDesignThinkingSubmission()
  await testFieldValidation()
  const retrievedIdeas = await testIdeaRetrieval()
  
  // R√©sum√© final
  console.log('\nüéâ Tests termin√©s!')
  console.log('\nüìã R√©sum√©:')
  console.log(`   ‚úÖ Connexion avec compte test: ${loginResult ? 'R√©ussie' : '√âchou√©e'}`)
  console.log(`   ‚úÖ Soumission id√©e standard: ${standardIdea ? 'R√©ussie' : '√âchou√©e'}`)
  console.log(`   ‚úÖ Soumission Design Thinking: ${designThinkingIdea ? 'R√©ussie' : '√âchou√©e'}`)
  console.log(`   ‚úÖ Validation des champs: Test√©e`)
  console.log(`   ‚úÖ R√©cup√©ration des id√©es: ${retrievedIdeas.length > 0 ? 'R√©ussie' : '√âchou√©e'}`)
  
  console.log('\nüí° Prochaines √©tapes recommand√©es:')
  console.log('   - Tester l\'interface utilisateur dans le navigateur')
  console.log('   - V√©rifier les formulaires de soumission')
  console.log('   - Tester la validation c√¥t√© client')
  console.log('   - Consid√©rer l\'ajout d\'un √©diteur WYSIWYG')
  
  console.log('\nüîë Informations de connexion pour tests manuels:')
  console.log(`   Email: ${TEST_EMAIL}`)
  console.log(`   Mot de passe: ${TEST_PASSWORD}`)
}

// Ex√©cuter les tests
if (import.meta.url === `file://${process.argv[1]}`) {
  runIdeaSubmissionTests().catch(console.error)
}

export { runIdeaSubmissionTests }
